import string
import args

type Succ[Z] = Z => Z at {}

type Church[Z] = Succ[Z] => (Z => Z at {}) at {}

def succ[Z](num: Church[Z]): Church[Z] =
    box { (s: Succ[Z]) => box { (z: Z) => s(num(s)(z)) } }

def u0[Z](): Church[Z] = box { (s: Succ[Z]) => box { (z: Z) => z } }
def u3[Z](): Church[Z] = succ(succ(succ(u0())))
def u27[Z](): Church[Z] = u3()(u3())

def intToChurch[Z](n: Int): Church[Z] =
    if (n == 0) u0()
    else succ(intToChurch(n - 1))

def churchToInt(num: Church[Int]): Int =
    num(box { (x: Int) => x + 1 })(0)

def calculate(x: Int) = churchToInt(intToChurch(x)(u27()))

def main() = commandLineArgs() match {
  case Nil() => println(calculate(4))
  case Cons(x, Nil()) =>
    with report[WrongFormat];
    println(calculate(x.toInt))
  case other => println("Expects zero or one argument, not '" ++ show(size(other)) ++ "'")
}
