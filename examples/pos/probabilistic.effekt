module probabilistic

effect IndexOutOfBounds[A](): A

type List[A] {
  Nil();
  Cons(head: A, tail: List[A])
}

def concat[A](l1: List[A], l2: List[A]): List[A] = l1 match {
  case Nil() => l2
  case Cons(a, rest) => Cons(a, concat(rest, l2))
}

def lookup[A](l: List[A], idx: Int): A / IndexOutOfBounds = l match {
  case Nil() => do IndexOutOfBounds()
  case Cons(n, rest) => if (idx == 0) n else lookup(rest, idx - 1)
}

def updateAt[A](l: List[A], idx: Int, el: A): List[A] / IndexOutOfBounds = l match {
  case Nil() => do IndexOutOfBounds()
  case Cons(n, rest) => if (idx == 0) { Cons(el, rest) } else Cons(n, updateAt(rest, idx - 1, el))
}

def length[A](l: List[A]): Int = l match {
  case Nil() => 0
  case Cons(_, rest) => 1 + length(rest)
}

type Var {
  Unobserved();
  Observed(value: Bool)
}

type Ref { MkRef(n: Int) }

interface Heap {
  def empty(v: Var): Ref
  def get(r: Ref): Var
  def put(r: Ref, v: Var): Unit
}

def heap[R] { prog: => R / Heap } = {
  var cells: List[Var] = Nil();
  var n = 0;
  try { prog() } with Heap {
    def empty(v) = { cells = Cons(v, cells); val ref = MkRef(n); n = n + 1; resume(ref) }
    def get(r) = r match {
      case MkRef(idx) => resume(lookup(cells, (length(cells) - idx) - 1))
    }
    def put(r, v) = r match {
      case MkRef(idx) =>
        cells = updateAt(cells, (length(cells) - idx) - 1, v);
        resume(())
    }
  }
}

effect Flip(prob: Double): Ref
effect Cond(x: Ref, p: Double, q: Double): Ref
effect Cond2(x: Ref, y: Ref, p1: Double, p2: Double, p3: Double, p4: Double): Ref
effect Conj(x: Ref, y: Ref): Ref
effect Disj(x: Ref, y: Ref): Ref
effect Prior(x: Ref, prob: Double): Unit

effect Score(prob: Double): Unit
effect Fork(): Bool
effect Fail[A](): A

def obs(r: Ref, a: Bool) =
  do get(r) match {
    case Unobserved() => do put(r, Observed(a))
    case Observed(y) => if (a == y) { () } else { do Fail() }
  }

def choose2[R] { x: R } { y: R } : R / Fork =
  if (do Fork()) { x() } else { y() }
def choose3[R] { x: R } { y: R } { z: R } : R / Fork =
  if (do Fork()) { x() } else if (do Fork()) { y() } else { z() }
def choose4[R] { w: R } { x: R } { y: R } { z: R } : R / Fork =
  if (do Fork()) { w() }
  else if (do Fork()) { x() }
  else if (do Fork()) { y() }
  else { z() }

type Weighted[R] { MkWeighted(weight: Double, value: R) }

def handleProb[R] { prog: => R / { Score, Fork, Fail } } = {
  val empty: List[Weighted[R]] = Nil();
  try {
    var current = 1.0;
    try {
      val res = prog();
      Cons(MkWeighted(current, res), empty)
    } with Score { p => current = current * p; resume(()) }
  } with Fork { () => concat(resume(true), resume(false)) }
    with Fail[A] { () => empty }
}

def collectProbs(b: Boolean, l: List[Weighted[Var]]): Double = {
  var res = 0.0;
  l match {
    case Nil() => 0.0
    case Cons(hd,tl) => hd match {
      case MkWeighted(w, Observed(out)) => if (out == b) {
        res + w + collectProbs(b,tl)
      } else {
        res + collectProbs(b,tl)
      }
      case MkWeighted(w, Unobserved()) => res + collectProbs(b,tl)
    }
  }
}

def posterior(res: List[Weighted[Var]]): List[Weighted[Boolean]] = {
  val resTru = collectProbs(true, res);
  val resFls = collectProbs(false, res);
  val modelEvi = resTru + resFls;
  val pstTru = MkWeighted(resTru/modelEvi, true);
  val pstFls = MkWeighted(resFls/modelEvi, false);
  Cons(pstTru, Cons(pstFls, Nil()))
}

def fresh(): Ref / Heap = do empty(Unobserved())

def handleLang(expected: Boolean) { prog: Ref => Ref / { Flip, Cond, Cond2, Conj, Disj, Prior } }: Var / {IndexOutOfBounds, Score, Fail, Fork} = heap {
  val input = fresh();
  try { do put(prog(input), Observed(expected)) }
  with Flip { p =>
    val res: Ref = fresh();
    resume(res);
    do get(res) match {
      case Unobserved() => ()
      case Observed(b) => if (b) { do Score(p) } else { do Score(1.0 - p) }
    }
  } with Cond { (x, p, q) =>
    val res: Ref = fresh();
    resume(res);
    do get(res) match {
      case Unobserved() => ()
      case Observed(b) => if (b) {
        choose2 {
          obs(x, true); do Score(p)
        } {
          obs(x, false); do Score(q)
        }
      } else {
        choose2 {
          obs(x, true); do Score(1.0 - p)
        } {
          obs(x, false); do Score(1.0 - q)
        }
      }
    }
  } with Cond2 { (x, y, ptt, ptf, pft, pff) =>
    val res: Ref = fresh();
    resume(res);
    do get(res) match {
      case Unobserved() => ()
      case Observed(b) => if (b) {
        choose4 {
          obs(x, true); obs(y, true); do Score(ptt)
        } {
          obs(x, true); obs(y, false); do Score(ptf)
        } {
          obs(x, false); obs(y, true); do Score(pft)
        } {
          obs(x, false); obs(y, false); do Score(pff)
        }
      } else {
        choose4 {
          obs(x, true); obs(y, true); do Score(1.0 - ptt)
        } {
          obs(x, true); obs(y, false); do Score(1.0 - ptf)
        } {
          obs(x, false); obs(y, true); do Score(1.0 - pft)
        } {
          obs(x, false); obs(y, false); do Score(1.0 - pff)
        }
      }
    }
  } with Conj { (x, y) =>
    val res: Ref = fresh();
    resume(res);
    do get(res) match {
      case Unobserved() => ()
      case Observed(b) => if (b) { obs(x, true); obs(y, true) }
      else { choose3 {
        obs(x, false); obs(y, true)
      } {
        obs(x, true); obs(y, false)
      } {
        obs(x, false); obs(y, false)
      } }
    }
  } with Disj { (x, y) =>
    val res: Ref = fresh();
    resume(res);
    do get(res) match {
      case Unobserved() => ()
      case Observed(b) => if (b) { choose3 {
        obs(x, false); obs(y, true)
      } {
        obs(x, true); obs(y, false)
      } {
        obs(x, true); obs(y, true)
      } } else { obs(x, false); obs(y, false) }
    }
  } with Prior { (x, p) =>
    resume(());
    do get(x) match {
      case Unobserved() => ()
      case Observed(b) => if (b) { do Score(p) } else { do Score(1.0 - p) }
    }
  };
  do get(input)
}

def test() = {
  if (do Fork()) {
    do Score(0.2);
    false
  } else {
    do Score(0.8);
    if (do Fork()) {
      do Score(0.6);
      true
    } else {
      do Score(0.4);
      false
    }
  }
}

def grass_model(rain: Ref) = {
  do Prior(rain, 0.2);
  val sprinkler = do Flip(0.1);
  val grass_is_wet = do Disj(do Disj(
    do Conj(do Flip(0.8),rain),
    do Conj(do Flip(0.95),sprinkler)),
    do Flip(0.01));
  grass_is_wet
}

def grass_model_Cond(rain: Ref) = {
  do Prior(rain, 0.2);
  val sprinkler = do Flip(0.1);
  val grass_is_wet = do Cond2(rain, sprinkler, 0.99, 0.70, 0.90, 0.01);
  grass_is_wet
}

def grass_model_CondSpr(rain: Ref) = {
  do Prior(rain, 0.2);
  val sprinkler = do Cond(rain, 0.01, 0.4);
  val grass_is_wet = do Cond2(rain, sprinkler, 0.99, 0.80, 0.90, 0.0);
  grass_is_wet
}

def print_grass_model(res: List[Weighted[Var]]): Unit / Console = {
  val pri = 0.2;
  val priTru = MkWeighted(pri, true);
  val priFls = MkWeighted(1.0 - pri, false);
  println("prior rain true/false");
  println(Cons(priTru, Cons(priFls, Nil())));
  println("posterior rain true/false conditioned grass is wet");
  println(posterior(res))
}

def heapTest() = heap {
  val r1 = do empty(Unobserved());
  val r2 = do empty(Unobserved());
  val r3 = do empty(Unobserved());
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)));

  do put(r2, Observed(true));
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)));

  do put(r3, Observed(false));
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)));

  do put(r2, Observed(false));
  println(show(do get(r1)) ++ show(do get(r2)) ++ show(do get(r3)))
}

def catch[R] { p: => R / IndexOutOfBounds }: Unit =
  try { p(); () }
  with IndexOutOfBounds[A] { () => println("Index out of bounds!") }

def main() = {
  val res = handleProb {
    test()
  };
  println(res);

  catch {
    heapTest()
  };

  catch {
    val res = handleProb {
      handleLang(true) { r =>
        do Disj(do Flip(0.2), r)
      }
    };
    println(res)
  };

  println("grass model:")
  catch {
    val res = handleProb {
      handleLang(true) { r =>
        grass_model(r)
      }
    };
    print_grass_model(res)
  };

  println("grass model Cond:")
  catch {
    val res = handleProb {
      handleLang(true) { r =>
        grass_model_Cond(r) }
    };
    print_grass_model(res)
  };

  println("grass model Cond sprinkler:")
  catch {
    val res = handleProb {
      handleLang(true) { r =>
        grass_model_CondSpr(r)
      }
    };
    print_grass_model(res)
  }
}
