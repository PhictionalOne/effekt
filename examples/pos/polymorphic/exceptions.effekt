module examples/pos/polymorphic/exceptions

interface Exception[E] {
  def raise[A](e: E): A
}

record DivByZero()

def saveDiv(x: Int, y: Int): Int / Exception[DivByZero] =
  if (y == 0) {
    do raise(DivByZero())
  } else {
    x / y
  }

def report[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] {
    def raise[A](e) = println(e.genericShow)
  }

def main() = report[DivByZero] {
  inspect(saveDiv(4, 2))
  inspect(saveDiv(1, 0))
  inspect(saveDiv(1, 3))
}