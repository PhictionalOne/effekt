module text/string

import immutable/option
import internal/option

def charAt(str: String, index: Int): Option[String] =
    if (index < 0 || length(str) <= index)
        Some(unsafeCharAt(str, index))
    else None()

extern pure def length(str: String): Int =
    "String.size(str)"

// extern pure def repeat(str: String, n: Int): String =
//     "???"

def substring(str: String, from: Int): String =
    if (from < 0 || length(str) <= from)
        unsafeSubstring(str, from)
    else str

extern pure def unsafeSubstring(str: String, from: Int): String =
    "String.extract(str, from, NONE)"

// extern pure def split(str: String, sep: String): Array[String] =
//     "Array.fromList (map (String.str) (String.explode str))"

// extern pure def trim(str: String): String =
//     "???"

// also accepts sml style `~2` for unary minus along with `+2` and `-2`
extern pure def internalStringToInt(str: String): MLOption[Int] =
    "Int.fromString str"

def toInt(str: String): Option[Int] = toOption(internalStringToInt(str))

extern pure def unsafeCharAt(str: String, n: Int): String =
    "String.sub(str, n)"
