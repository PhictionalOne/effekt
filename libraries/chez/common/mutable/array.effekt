module mutable/array

import immutable/option
import immutable/cslist

// a mutable array backed by a scheme vector
extern type Array[T]

extern pure def emptyArray[T](size: Int): Array[T] =
  chez "(make-vector ${size})"

def get[T](arr: Array[T], index: Int): Option[T] =
  if (index >= arr.size) None() else Some(arr.unsafeGet(index))

extern pure def size[T](arr: Array[T]): Int =
  chez "(vector-length ${arr})"

// raises a scheme exception if out of bounds
extern pure def unsafeGet[T](arr: Array[T], index: Int): T =
  chez "(vector-ref ${arr} ${index})"

// TODO raises a scheme exception if out of bounds
extern io def put[T](arr: Array[T], index: Int, value: T): Unit =
  chez "(begin (vector-set! ${arr} ${index} ${value}) #f)"

extern pure def toArray[A](l: CSList[A]): Array[A] =
  chez "(list->vector ${l})"