module effekt

// shift-0 based implementation
extern include chezCallCC "../common/effekt_primitives.ss"
// extern include chezCallCC "datatype.ss"
extern include chezCallCC "seq0.ss"
extern include chezCallCC "tail0.ss"
extern include chezCallCC "effekt.ss"
extern include chezCallCC "../common/effekt_matching.ss"


def locally[R] { f: => R }: R = f()

// String ops
// ==========
extern pure def infixConcat(s1: String, s2: String): String =
  chezCallCC "(string-append ${s1} ${s2})"

// TODO implement
extern pure def show[R](value: R): String =
  chezCallCC "(show_impl ${value})"

extern io def println[R](r: R): Unit =
  chezCallCC "(println_impl ${r})"

extern io def error[R](msg: String): R =
  chezCallCC "(raise ${msg})"

extern io def random(): Double =
  chezCallCC "(random 1.0)"

// Math ops
// ========
extern pure def infixAdd(x: Int, y: Int): Int =
  chezCallCC "(+ ${x} ${y})"

extern pure def infixMul(x: Int, y: Int): Int =
  chezCallCC "(* ${x} ${y})"

extern pure def infixDiv(x: Int, y: Int): Int =
  chezCallCC "(floor (/ ${x} ${y}))"

extern pure def infixSub(x: Int, y: Int): Int =
  chezCallCC "(- ${x} ${y})"

extern pure def mod(x: Int, y: Int): Int =
  chezCallCC "(modulo ${x} ${y})"

extern pure def infixAdd(x: Double, y: Double): Double =
  chezCallCC "(+ ${x} ${y})"

extern pure def infixMul(x: Double, y: Double): Double =
  chezCallCC "(* ${x} ${y})"

extern pure def infixDiv(x: Double, y: Double): Double =
  chezCallCC "(/ ${x} ${y})"

extern pure def infixSub(x: Double, y: Double): Double =
  chezCallCC "(- ${x} ${y})"

extern pure def cos(x: Double): Double =
  chezCallCC "(cos ${x})"

extern pure def sin(x: Double): Double =
  chezCallCC "(sin ${x})"

extern pure def atan(x: Double): Double =
  chezCallCC "(atan ${x})"

extern pure def tan(x: Double): Double =
  chezCallCC "(tan ${x})"

extern pure def sqrt(x: Double): Double =
  chezCallCC "(sqrt ${x})"

extern pure def square(x: Double): Double =
  chezCallCC "(* ${x} ${x})"

extern pure def log(x: Double): Double =
  chezCallCC "(log ${x})"

extern pure def log1p(x: Double): Double =
  chezCallCC "(log (+ ${x} 1))"

extern pure def exp(x: Double): Double =
  chezCallCC "(exp ${x})"

// since we do not have "extern val", yet
extern pure def _pi(): Double =
  chezCallCC "(* 4 (atan 1))"

val PI: Double = _pi()

extern pure def toInt(d: Double): Int =
  chezCallCC "(round ${d})"

extern pure def toDouble(d: Int): Double =
  chezCallCC "${d}"

def min(n: Int, m: Int): Int =
    if (n < m) n else m

def max(n: Int, m: Int): Int =
    if (n > m) n else m

// Comparison ops
// ==============
extern pure def infixEq[R](x: R, y: R): Bool =
  chezCallCC "(equal_impl ${x} ${y})"

extern pure def infixNeq[R](x: R, y: R): Bool =
  chezCallCC "(not (equal_impl ${x} ${y}))"

extern pure def infixLt(x: Int, y: Int): Bool =
  chezCallCC "(< ${x} ${y})"

extern pure def infixLte(x: Int, y: Int): Bool =
  chezCallCC "(<= ${x} ${y})"

extern pure def infixGt(x: Int, y: Int): Bool =
  chezCallCC "(> ${x} ${y})"

extern pure def infixGte(x: Int, y: Int): Bool =
  chezCallCC "(>= ${x} ${y})"

extern pure def infixLt(x: Double, y: Double): Bool =
  chezCallCC "(< ${x} ${y})"

extern pure def infixLte(x: Double, y: Double): Bool =
  chezCallCC "(<= ${x} ${y})"

extern pure def infixGt(x: Double, y: Double): Bool =
  chezCallCC "(> ${x} ${y})"

extern pure def infixGte(x: Double, y: Double): Bool =
  chezCallCC "(>= ${x} ${y})"

// Bool ops
// ===========
// for now those are considered eager
extern pure def not(b: Bool): Bool =
  chezCallCC "(not ${b})"

def infixOr { first: => Bool } { second: => Bool }: Bool = 
  if (first()) true else second()

def infixAnd { first: => Bool } { second: => Bool }: Bool = 
  if (first()) second() else false

// Should only be used internally since values in Effekt should not be undefined
extern pure def isUndefined[A](value: A): Bool =
  chezCallCC "(eq? ${value} #f)"

// Pairs
// =====
record Tuple2[A, B](first: A, second: B)
record Tuple3[A, B, C](first: A, second: B, third: C)
record Tuple4[A, B, C, D](first: A, second: B, third: C, fourth: D)
record Tuple5[A, B, C, D, E](first: A, second: B, third: C, fourth: D, fifth: E)
record Tuple6[A, B, C, D, E, F](first: A, second: B, third: C, fourth: D, fifth: E, sixth: F)

// Exceptions
// ==========
// a fatal runtime error that cannot be caught
extern io def panic[R](msg: String): R =
  chezCallCC "(raise ${msg})"

interface Exception[E] {
  def raise(exception: E, msg: String): Nothing
}
record RuntimeError()

def raise[A](msg: String): A / Exception[RuntimeError] = do raise(RuntimeError(), msg) match {}
def raise[A, E](exception: E, msg: String): A / Exception[E] = do raise(exception, msg) match {}

// converts exceptions of (static) type E to an uncatchable panic that aborts the program
def panicOn[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = panic(msg) }

// reports exceptions of (static) type E to the console
def report[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = println(msg) }

// ignores exceptions of (static) type E
// TODO this should be called "ignore" but that name currently clashes with internal pattern matching names on $effekt
def ignoring[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = () }

// Control Flow
// ============
interface Control {
  def break(): Unit
  def continue(): Unit
}

def loop { f: () => Unit / Control }: Unit = try {
  def go(): Unit = { f(); go() }
  go()
} with Control {
  def break() = ()
  def continue() = loop { f }
}

/**
 * Calls provided action repeatedly. `start` is inclusive, `end` is not.
 */
def each(start: Int, end: Int) { action: (Int) => Unit / Control } = {
  var i = start;
  loop {
    if (i < end) { val el = i; i = i + 1; action(el) }
    else { do break() }
  }
}

def repeat(n: Int) { action: () => Unit / Control } = each(0, n) { n => action() }

// Benchmarking
// ============
// should only be used with pure blocks
extern control def measure(warmup: Int, iterations: Int) { block: => Unit }: Unit =
  chezCallCC "(display (measure ${box block} ${warmup} ${iterations}))"
