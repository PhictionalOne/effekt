module effekt

// Runtime
// TODO split runtime into monadic and direct
extern include js "effekt_runtime.js"

// Builtins
extern include js "effekt_builtins.js"

def locally[R] { f: => R }: R = f()

// Side effecting ops
// ==================
extern io def println[R](value: R): Unit =
  js "println$impl(${value})"

extern io def inspect[R](value: R): Unit =
  js "console.log(${value})"

extern io def random(): Double =
  js "Math.random()"

extern io def timestamp(): Int =
  js "Date.now()"

// References and state
// ====================
// the following type is defined in builtins.scala
// interface Ref[T] { def get(): T; def put(t: T): Unit }
extern io def freshIn[T](t: T) {r: Region}: Ref[T] at {r} = js "r.fresh(${t})"
extern io def freshGlobal[T](t: T): Ref[T] at {global} = js "$effekt.fresh(${t})"

// String ops
// ==========
extern pure def show[R](value: R): String =
  js "show$impl(${value})"

extern pure def infixConcat(s1: String, s2: String): String =
  js "${s1} + ${s2}"

// Math ops
// ========
extern pure def infixAdd(x: Int, y: Int): Int =
  js "(${x} + ${y})"

extern pure def infixMul(x: Int, y: Int): Int =
  js "(${x} * ${y})"

extern pure def infixDiv(x: Int, y: Int): Int =
  js "Math.floor(${x} / ${y})"

extern pure def infixSub(x: Int, y: Int): Int =
  js "(${x} - ${y})"

extern pure def mod(x: Int, y: Int): Int =
  js "(${x} % ${y})"

extern pure def infixAdd(x: Double, y: Double): Double =
  js "(${x} + ${y})"

extern pure def infixMul(x: Double, y: Double): Double =
  js "(${x} * ${y})"

extern pure def infixSub(x: Double, y: Double): Double =
  js "(${x} - ${y})"

extern pure def infixDiv(x: Double, y: Double): Double =
  js "(${x} / ${y})"


extern pure def cos(x: Double): Double =
  js "Math.cos(${x})"

extern pure def sin(x: Double): Double =
  js "Math.sin(${x})"

extern pure def atan(x: Double): Double =
  js "Math.atan(${x})"

extern pure def tan(x: Double): Double =
  js "Math.tan(${x})"

extern pure def sqrt(x: Double): Double =
  js "Math.sqrt(${x})"

extern pure def square(x: Double): Double =
  js "(${x} * ${x})"

extern pure def log(x: Double): Double =
  js "Math.log(${x})"

extern pure def log1p(x: Double): Double =
  js "Math.log1p(${x})"

extern pure def exp(x: Double): Double =
  js "Math.exp(${x})"

// since we do not have "extern val", yet
extern pure def _pi(): Double =
  js "Math.PI"

val PI: Double = _pi()

extern pure def toInt(d: Double): Int =
  js "Math.round(${d})"

extern pure def toDouble(d: Int): Double =
  js "${d}"

extern pure def floor(d: Double): Int =
  js "Math.floor(${d})"

extern pure def ceil(d: Double): Int =
  js "Math.ceil(${d})"

def min(n: Int, m: Int): Int =
    if (n < m) n else m

def max(n: Int, m: Int): Int =
    if (n > m) n else m

// Comparison ops
// ==============
extern pure def infixEq[R](x: R, y: R): Bool =
  js "equals$impl(${x}, ${y})"

extern pure def infixNeq[R](x: R, y: R): Bool =
  js "!equals$impl(${x}, ${y})"

// Result of comparison between two objects according to some order:
//
// - `Less()` means that the first object is *before* the first in the order,
// - `Equal()` means that the two objects are the same in the order,
// - and `Greater()` means that the second object is *before* the first in the order.
type Ordering {
   Less();
   Equal();
   Greater()
 }

 extern pure def genericCompareImpl[R](x: R, y: R): Int =
   js "compare$impl(${x}, ${y})"

 // Compares two values of the same type, returning an `Ordering`.
 def genericCompare[R](x: R, y: R): Ordering = {
   genericCompareImpl(x, y) match {
    case -1 => Less()
    case 0 => Equal()
    case 1 => Greater()
    case _ => <{ "Impossible: JS comparison returned invalid value!" }>
   }
 }

extern pure def infixLt(x: Int, y: Int): Bool =
  js "(${x} < ${y})"

extern pure def infixLte(x: Int, y: Int): Bool =
  js "(${x} <= ${y})"

extern pure def infixGt(x: Int, y: Int): Bool =
  js "(${x} > ${y})"

extern pure def infixGte(x: Int, y: Int): Bool =
  js "(${x} >= ${y})"

extern pure def infixLt(x: Double, y: Double): Bool =
  js "(${x} < ${y})"

extern pure def infixLte(x: Double, y: Double): Bool =
  js "(${x} <= ${y})"

extern pure def infixGt(x: Double, y: Double): Bool =
  js "(${x} > ${y})"

extern pure def infixGte(x: Double, y: Double): Bool =
  js "(${x} >= ${y})"

extern pure def infixLt(x: String, y: String): Bool =
  js "(${x} < ${y})"

extern pure def infixLte(x: String, y: String): Bool =
  js "(${x} <= ${y})"

extern pure def infixGt(x: String, y: String): Bool =
  js "(${x} > ${y})"

extern pure def infixGte(x: String, y: String): Bool =
  js "(${x} >= ${y})"

// Bool ops
// ===========
// for now those are considered eager
extern pure def not(b: Bool): Bool =
  js "!${b}"

def infixOr { first: => Bool } { second: => Bool }: Bool = 
  if (first()) true else second()

def infixAnd { first: => Bool } { second: => Bool }: Bool = 
  if (first()) second() else false

// Undefined and Null
// ==================
// Should only be used for interop with JS, since values in Effekt should not be undefined

// Is something an undefined JavaScript value?
extern pure def isUndefined[A](value: A): Bool =
  js "(${value} === undefined)"

// Is something a JavaScript null value?
extern pure def isNull[A](value: A): Bool =
  js "(${value} === null)"

// Pairs
// =====
record Tuple2[A, B](first: A, second: B)
record Tuple3[A, B, C](first: A, second: B, third: C)
record Tuple4[A, B, C, D](first: A, second: B, third: C, fourth: D)
record Tuple5[A, B, C, D, E](first: A, second: B, third: C, fourth: D, fifth: E)
record Tuple6[A, B, C, D, E, F](first: A, second: B, third: C, fourth: D, fifth: E, sixth: F)


// Exceptions
// ==========
// a fatal runtime error that cannot be caught
extern io def panic[R](msg: String): R =
  js "(function() { throw ${msg} })()"

interface Exception[E] {
  def raise(exception: E, msg: String): Nothing
}
record RuntimeError()

def raise[A](msg: String): A / Exception[RuntimeError] = do raise(RuntimeError(), msg) match {}
def raise[A, E](exception: E, msg: String): A / Exception[E] = do raise(exception, msg) match {}

// converts exceptions of (static) type E to an uncatchable panic that aborts the program
def panicOn[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = panic(msg) }

// reports exceptions of (static) type E to the console
def report[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = println(msg) }

// ignores exceptions of (static) type E
// TODO this should be called "ignore" but that name currently clashes with internal pattern matching names on $effekt
def ignoring[E] { prog: => Unit / Exception[E] }: Unit =
  try { prog() } with Exception[E] { def raise(exception: E, msg: String) = () }

// Control Flow
// ============
interface Control {
  def break(): Unit
  def continue(): Unit
}

def loop { f: () => Unit / Control }: Unit = try {
  def go(): Unit = { f(); go() }
  go()
} with Control {
  def break() = ()
  def continue() = loop { f }
}

/**
 * Calls provided action repeatedly. `start` is inclusive, `end` is not.
 */
def each(start: Int, end: Int) { action: (Int) => Unit / Control } = {
  var i = start;
  loop {
    if (i < end) { val el = i; i = i + 1; action(el) }
    else { do break() }
  }
}

def repeat(n: Int) { action: () => Unit / Control } = each(0, n) { n => action() }


// Benchmarking
// ============

// Current time in nanoseconds
// TODO use a better timer
extern control def currentTimeNanos(): Int =
  js "$effekt.delayed(() => new Date().getTime() * 1000000)"

extern io def setTimeout(callback: () => Unit at {}, timeout: Int): Unit =
  js "(function() { window.setTimeout(() => ${callback}().run(), ${timeout}); return $effekt.unit; })()"

// runs the block and returns the time in nanoseconds
def timed { block: => Unit }: Int = {
  val before = currentTimeNanos()
  block()
  val after = currentTimeNanos()
  after - before
}

def measure(warmup: Int, iterations: Int) { block: => Unit }: Unit = {
  def run(n: Int, report: Bool): Unit = {
    if (n <= 0) { () } else {
      val time = timed { block() };
      if (report) { println(time) } else { () };
      run(n - 1, report)
    }
  }
  run(warmup, false)
  run(iterations, true)
}
