module text/string

import immutable/option
import mutable/array

def charAt(str: String, index: Int): Option[String] =
    str.unsafeCharAt(index).undefinedToOption

extern pure def length(str: String): Int =
  js "${str}.length"

extern pure def repeat(str: String, n: Int): String =
  js "${str}.repeat(${n})"

extern pure def unsafeSubstring(str: String, from: Int, to: Int): String =
  js "${str}.substring(${from}, ${to})"

def substring(str: String, from: Int, to: Int): String =
  if (from >= to) { "" }
  else {
    str.unsafeSubstring(from, to)
  }

def substring(str: String, from: Int): String =
  str.unsafeSubstring(from, str.length)

extern pure def split(str: String, sep: String): Array[String] =
  js "${str}.split(${sep})"

extern pure def trim(str: String): String =
  js "${str}.trim()"

def toInt(str: String): Option[Int] =
  str.unsafeToInt.undefinedToOption

extern pure def unsafeCharAt(str: String, n: Int): String =
  js "${str}[${n}]"

extern pure def unsafeToInt(str: String): Int =
  js "(Number.isNaN(parseInt(${str})) ? undefined : parseInt(${str}))"

def indexOf(str: String, sub: String): Option[Int] = {
  val index = str.unsafeIndexOf(sub)
  if (index < 0) { None() } else { Some(index) }
}

def lastIndexOf(str: String, sub: String): Option[Int] = {
  val index = str.unsafeLastIndexOf(sub)
  if (index < 0) { None() } else { Some(index) }
}

extern pure def unsafeIndexOf(str: String, sub: String): Int = js "${str}.indexOf(${sub})"
extern pure def unsafeLastIndexOf(str: String, sub: String): Int = js "${str}.lastIndexOf(${sub})"

extern pure def startsWith(str: String, prefix: String): Bool =
  js "${str}.startsWith(${prefix})"

extern pure def endsWith(str: String, suffix: String): Bool =
  js "${str}.endsWith(${suffix})"

// ANSI escape codes
val ANSI_GREEN = "\u001b[32m"
val ANSI_RED = "\u001b[31m"
val ANSI_RESET = "\u001b[0m"
